                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module a_lcd
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setLcd_PARM_2
                                     12 	.globl _setLcd
                                     13 	.globl _minusLcd
                                     14 	.globl _addLcd
                                     15 	.globl _sumLcdVal
                                     16 	.globl _showLcd
                                     17 	.globl _showLcd3
                                     18 	.globl _showLcd2
                                     19 	.globl _lcdDelay
                                     20 	.globl _CY
                                     21 	.globl _AC
                                     22 	.globl _F0
                                     23 	.globl _RS1
                                     24 	.globl _RS0
                                     25 	.globl _OV
                                     26 	.globl _F1
                                     27 	.globl _P
                                     28 	.globl _PS
                                     29 	.globl _PT1
                                     30 	.globl _PX1
                                     31 	.globl _PT0
                                     32 	.globl _PX0
                                     33 	.globl _RD
                                     34 	.globl _WR
                                     35 	.globl _T1
                                     36 	.globl _T0
                                     37 	.globl _INT1
                                     38 	.globl _INT0
                                     39 	.globl _TXD
                                     40 	.globl _RXD
                                     41 	.globl _P3_7
                                     42 	.globl _P3_6
                                     43 	.globl _P3_5
                                     44 	.globl _P3_4
                                     45 	.globl _P3_3
                                     46 	.globl _P3_2
                                     47 	.globl _P3_1
                                     48 	.globl _P3_0
                                     49 	.globl _EA
                                     50 	.globl _ES
                                     51 	.globl _ET1
                                     52 	.globl _EX1
                                     53 	.globl _ET0
                                     54 	.globl _EX0
                                     55 	.globl _P2_7
                                     56 	.globl _P2_6
                                     57 	.globl _P2_5
                                     58 	.globl _P2_4
                                     59 	.globl _P2_3
                                     60 	.globl _P2_2
                                     61 	.globl _P2_1
                                     62 	.globl _P2_0
                                     63 	.globl _SM0
                                     64 	.globl _SM1
                                     65 	.globl _SM2
                                     66 	.globl _REN
                                     67 	.globl _TB8
                                     68 	.globl _RB8
                                     69 	.globl _TI
                                     70 	.globl _RI
                                     71 	.globl _P1_7
                                     72 	.globl _P1_6
                                     73 	.globl _P1_5
                                     74 	.globl _P1_4
                                     75 	.globl _P1_3
                                     76 	.globl _P1_2
                                     77 	.globl _P1_1
                                     78 	.globl _P1_0
                                     79 	.globl _TF1
                                     80 	.globl _TR1
                                     81 	.globl _TF0
                                     82 	.globl _TR0
                                     83 	.globl _IE1
                                     84 	.globl _IT1
                                     85 	.globl _IE0
                                     86 	.globl _IT0
                                     87 	.globl _P0_7
                                     88 	.globl _P0_6
                                     89 	.globl _P0_5
                                     90 	.globl _P0_4
                                     91 	.globl _P0_3
                                     92 	.globl _P0_2
                                     93 	.globl _P0_1
                                     94 	.globl _P0_0
                                     95 	.globl _B
                                     96 	.globl _ACC
                                     97 	.globl _PSW
                                     98 	.globl _IP
                                     99 	.globl _P3
                                    100 	.globl _IE
                                    101 	.globl _P2
                                    102 	.globl _SBUF
                                    103 	.globl _SCON
                                    104 	.globl _P1
                                    105 	.globl _TH1
                                    106 	.globl _TH0
                                    107 	.globl _TL1
                                    108 	.globl _TL0
                                    109 	.globl _TMOD
                                    110 	.globl _TCON
                                    111 	.globl _PCON
                                    112 	.globl _DPH
                                    113 	.globl _DPL
                                    114 	.globl _SP
                                    115 	.globl _P0
                                    116 	.globl _showLcd_PARM_2
                                    117 	.globl _lcdVal
                                    118 	.globl _numTable
                                    119 ;--------------------------------------------------------
                                    120 ; special function registers
                                    121 ;--------------------------------------------------------
                                    122 	.area RSEG    (ABS,DATA)
      000000                        123 	.org 0x0000
                           000080   124 _P0	=	0x0080
                           000081   125 _SP	=	0x0081
                           000082   126 _DPL	=	0x0082
                           000083   127 _DPH	=	0x0083
                           000087   128 _PCON	=	0x0087
                           000088   129 _TCON	=	0x0088
                           000089   130 _TMOD	=	0x0089
                           00008A   131 _TL0	=	0x008a
                           00008B   132 _TL1	=	0x008b
                           00008C   133 _TH0	=	0x008c
                           00008D   134 _TH1	=	0x008d
                           000090   135 _P1	=	0x0090
                           000098   136 _SCON	=	0x0098
                           000099   137 _SBUF	=	0x0099
                           0000A0   138 _P2	=	0x00a0
                           0000A8   139 _IE	=	0x00a8
                           0000B0   140 _P3	=	0x00b0
                           0000B8   141 _IP	=	0x00b8
                           0000D0   142 _PSW	=	0x00d0
                           0000E0   143 _ACC	=	0x00e0
                           0000F0   144 _B	=	0x00f0
                                    145 ;--------------------------------------------------------
                                    146 ; special function bits
                                    147 ;--------------------------------------------------------
                                    148 	.area RSEG    (ABS,DATA)
      000000                        149 	.org 0x0000
                           000080   150 _P0_0	=	0x0080
                           000081   151 _P0_1	=	0x0081
                           000082   152 _P0_2	=	0x0082
                           000083   153 _P0_3	=	0x0083
                           000084   154 _P0_4	=	0x0084
                           000085   155 _P0_5	=	0x0085
                           000086   156 _P0_6	=	0x0086
                           000087   157 _P0_7	=	0x0087
                           000088   158 _IT0	=	0x0088
                           000089   159 _IE0	=	0x0089
                           00008A   160 _IT1	=	0x008a
                           00008B   161 _IE1	=	0x008b
                           00008C   162 _TR0	=	0x008c
                           00008D   163 _TF0	=	0x008d
                           00008E   164 _TR1	=	0x008e
                           00008F   165 _TF1	=	0x008f
                           000090   166 _P1_0	=	0x0090
                           000091   167 _P1_1	=	0x0091
                           000092   168 _P1_2	=	0x0092
                           000093   169 _P1_3	=	0x0093
                           000094   170 _P1_4	=	0x0094
                           000095   171 _P1_5	=	0x0095
                           000096   172 _P1_6	=	0x0096
                           000097   173 _P1_7	=	0x0097
                           000098   174 _RI	=	0x0098
                           000099   175 _TI	=	0x0099
                           00009A   176 _RB8	=	0x009a
                           00009B   177 _TB8	=	0x009b
                           00009C   178 _REN	=	0x009c
                           00009D   179 _SM2	=	0x009d
                           00009E   180 _SM1	=	0x009e
                           00009F   181 _SM0	=	0x009f
                           0000A0   182 _P2_0	=	0x00a0
                           0000A1   183 _P2_1	=	0x00a1
                           0000A2   184 _P2_2	=	0x00a2
                           0000A3   185 _P2_3	=	0x00a3
                           0000A4   186 _P2_4	=	0x00a4
                           0000A5   187 _P2_5	=	0x00a5
                           0000A6   188 _P2_6	=	0x00a6
                           0000A7   189 _P2_7	=	0x00a7
                           0000A8   190 _EX0	=	0x00a8
                           0000A9   191 _ET0	=	0x00a9
                           0000AA   192 _EX1	=	0x00aa
                           0000AB   193 _ET1	=	0x00ab
                           0000AC   194 _ES	=	0x00ac
                           0000AF   195 _EA	=	0x00af
                           0000B0   196 _P3_0	=	0x00b0
                           0000B1   197 _P3_1	=	0x00b1
                           0000B2   198 _P3_2	=	0x00b2
                           0000B3   199 _P3_3	=	0x00b3
                           0000B4   200 _P3_4	=	0x00b4
                           0000B5   201 _P3_5	=	0x00b5
                           0000B6   202 _P3_6	=	0x00b6
                           0000B7   203 _P3_7	=	0x00b7
                           0000B0   204 _RXD	=	0x00b0
                           0000B1   205 _TXD	=	0x00b1
                           0000B2   206 _INT0	=	0x00b2
                           0000B3   207 _INT1	=	0x00b3
                           0000B4   208 _T0	=	0x00b4
                           0000B5   209 _T1	=	0x00b5
                           0000B6   210 _WR	=	0x00b6
                           0000B7   211 _RD	=	0x00b7
                           0000B8   212 _PX0	=	0x00b8
                           0000B9   213 _PT0	=	0x00b9
                           0000BA   214 _PX1	=	0x00ba
                           0000BB   215 _PT1	=	0x00bb
                           0000BC   216 _PS	=	0x00bc
                           0000D0   217 _P	=	0x00d0
                           0000D1   218 _F1	=	0x00d1
                           0000D2   219 _OV	=	0x00d2
                           0000D3   220 _RS0	=	0x00d3
                           0000D4   221 _RS1	=	0x00d4
                           0000D5   222 _F0	=	0x00d5
                           0000D6   223 _AC	=	0x00d6
                           0000D7   224 _CY	=	0x00d7
                                    225 ;--------------------------------------------------------
                                    226 ; overlayable register banks
                                    227 ;--------------------------------------------------------
                                    228 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        229 	.ds 8
                                    230 ;--------------------------------------------------------
                                    231 ; internal ram data
                                    232 ;--------------------------------------------------------
                                    233 	.area DSEG    (DATA)
      000000                        234 _numTable::
      000000                        235 	.ds 10
      00000A                        236 _lcdVal::
      00000A                        237 	.ds 4
      00000E                        238 _showLcd_PARM_2:
      00000E                        239 	.ds 1
                                    240 ;--------------------------------------------------------
                                    241 ; overlayable items in internal ram 
                                    242 ;--------------------------------------------------------
                                    243 	.area	OSEG    (OVR,DATA)
                                    244 	.area	OSEG    (OVR,DATA)
      000000                        245 _setLcd_PARM_2:
      000000                        246 	.ds 1
                                    247 ;--------------------------------------------------------
                                    248 ; indirectly addressable internal ram data
                                    249 ;--------------------------------------------------------
                                    250 	.area ISEG    (DATA)
                                    251 ;--------------------------------------------------------
                                    252 ; absolute internal ram data
                                    253 ;--------------------------------------------------------
                                    254 	.area IABS    (ABS,DATA)
                                    255 	.area IABS    (ABS,DATA)
                                    256 ;--------------------------------------------------------
                                    257 ; bit data
                                    258 ;--------------------------------------------------------
                                    259 	.area BSEG    (BIT)
                                    260 ;--------------------------------------------------------
                                    261 ; paged external ram data
                                    262 ;--------------------------------------------------------
                                    263 	.area PSEG    (PAG,XDATA)
                                    264 ;--------------------------------------------------------
                                    265 ; external ram data
                                    266 ;--------------------------------------------------------
                                    267 	.area XSEG    (XDATA)
                                    268 ;--------------------------------------------------------
                                    269 ; absolute external ram data
                                    270 ;--------------------------------------------------------
                                    271 	.area XABS    (ABS,XDATA)
                                    272 ;--------------------------------------------------------
                                    273 ; external initialized ram data
                                    274 ;--------------------------------------------------------
                                    275 	.area XISEG   (XDATA)
                                    276 	.area HOME    (CODE)
                                    277 	.area GSINIT0 (CODE)
                                    278 	.area GSINIT1 (CODE)
                                    279 	.area GSINIT2 (CODE)
                                    280 	.area GSINIT3 (CODE)
                                    281 	.area GSINIT4 (CODE)
                                    282 	.area GSINIT5 (CODE)
                                    283 	.area GSINIT  (CODE)
                                    284 	.area GSFINAL (CODE)
                                    285 	.area CSEG    (CODE)
                                    286 ;--------------------------------------------------------
                                    287 ; global & static initialisations
                                    288 ;--------------------------------------------------------
                                    289 	.area HOME    (CODE)
                                    290 	.area GSINIT  (CODE)
                                    291 	.area GSFINAL (CODE)
                                    292 	.area GSINIT  (CODE)
                                    293 ;	a_lcd.c:3: unsigned char numTable[] = { 0xC0, 0xF9, 0xA4, 0xB0, 0x99,   // 0, 1, 2, 3, 4
      000000 75*00 C0         [24]  294 	mov	_numTable,#0xc0
      000003 75*01 F9         [24]  295 	mov	(_numTable + 0x0001),#0xf9
      000006 75*02 A4         [24]  296 	mov	(_numTable + 0x0002),#0xa4
      000009 75*03 B0         [24]  297 	mov	(_numTable + 0x0003),#0xb0
      00000C 75*04 99         [24]  298 	mov	(_numTable + 0x0004),#0x99
      00000F 75*05 92         [24]  299 	mov	(_numTable + 0x0005),#0x92
      000012 75*06 82         [24]  300 	mov	(_numTable + 0x0006),#0x82
      000015 75*07 F8         [24]  301 	mov	(_numTable + 0x0007),#0xf8
      000018 75*08 80         [24]  302 	mov	(_numTable + 0x0008),#0x80
      00001B 75*09 90         [24]  303 	mov	(_numTable + 0x0009),#0x90
                                    304 ;	a_lcd.c:17: unsigned char lcdVal[4] = {0};
      00001E 75*0A 00         [24]  305 	mov	_lcdVal,#0x00
                                    306 ;--------------------------------------------------------
                                    307 ; Home
                                    308 ;--------------------------------------------------------
                                    309 	.area HOME    (CODE)
                                    310 	.area HOME    (CODE)
                                    311 ;--------------------------------------------------------
                                    312 ; code
                                    313 ;--------------------------------------------------------
                                    314 	.area CSEG    (CODE)
                                    315 ;------------------------------------------------------------
                                    316 ;Allocation info for local variables in function 'lcdDelay'
                                    317 ;------------------------------------------------------------
                                    318 ;i                         Allocated to registers 
                                    319 ;j                         Allocated to registers r6 
                                    320 ;------------------------------------------------------------
                                    321 ;	a_lcd.c:8: void lcdDelay(unsigned char i){
                                    322 ;	-----------------------------------------
                                    323 ;	 function lcdDelay
                                    324 ;	-----------------------------------------
      000000                        325 _lcdDelay:
                           000007   326 	ar7 = 0x07
                           000006   327 	ar6 = 0x06
                           000005   328 	ar5 = 0x05
                           000004   329 	ar4 = 0x04
                           000003   330 	ar3 = 0x03
                           000002   331 	ar2 = 0x02
                           000001   332 	ar1 = 0x01
                           000000   333 	ar0 = 0x00
      000000 AF 82            [24]  334 	mov	r7,dpl
      000002                        335 00106$:
                                    336 ;	a_lcd.c:10: for (; i > 0; i--){
      000002 EF               [12]  337 	mov	a,r7
      000003 60 0B            [24]  338 	jz	00108$
                                    339 ;	a_lcd.c:11: for (j = 125; j > 0; j--){
      000005 7E 7D            [12]  340 	mov	r6,#0x7d
      000007                        341 00104$:
      000007 EE               [12]  342 	mov	a,r6
      000008 14               [12]  343 	dec	a
      000009 FD               [12]  344 	mov	r5,a
      00000A FE               [12]  345 	mov	r6,a
      00000B 70 FA            [24]  346 	jnz	00104$
                                    347 ;	a_lcd.c:10: for (; i > 0; i--){
      00000D 1F               [12]  348 	dec	r7
      00000E 80 F2            [24]  349 	sjmp	00106$
      000010                        350 00108$:
                                    351 ;	a_lcd.c:15: }
      000010 22               [24]  352 	ret
                                    353 ;------------------------------------------------------------
                                    354 ;Allocation info for local variables in function 'showLcd2'
                                    355 ;------------------------------------------------------------
                                    356 ;	a_lcd.c:19: void showLcd2(){
                                    357 ;	-----------------------------------------
                                    358 ;	 function showLcd2
                                    359 ;	-----------------------------------------
      000011                        360 _showLcd2:
                                    361 ;	a_lcd.c:20: P0 = numTable[lcdVal[0]];
      000011 E5*0A            [12]  362 	mov	a,_lcdVal
      000013 24r00            [12]  363 	add	a,#_numTable
      000015 F9               [12]  364 	mov	r1,a
      000016 87 80            [24]  365 	mov	_P0,@r1
                                    366 ;	a_lcd.c:21: P2_0 = 0;
                                    367 ;	assignBit
      000018 C2 A0            [12]  368 	clr	_P2_0
                                    369 ;	a_lcd.c:22: lcdDelay(5);
      00001A 75 82 05         [24]  370 	mov	dpl,#0x05
      00001D 12r00r00         [24]  371 	lcall	_lcdDelay
                                    372 ;	a_lcd.c:23: P2_0 = 1;
                                    373 ;	assignBit
      000020 D2 A0            [12]  374 	setb	_P2_0
                                    375 ;	a_lcd.c:24: P0 = numTable[lcdVal[1]];
      000022 E5*0B            [12]  376 	mov	a,(_lcdVal + 0x0001)
      000024 24r00            [12]  377 	add	a,#_numTable
      000026 F9               [12]  378 	mov	r1,a
      000027 87 80            [24]  379 	mov	_P0,@r1
                                    380 ;	a_lcd.c:25: P2_1 = 0;
                                    381 ;	assignBit
      000029 C2 A1            [12]  382 	clr	_P2_1
                                    383 ;	a_lcd.c:26: lcdDelay(5);
      00002B 75 82 05         [24]  384 	mov	dpl,#0x05
      00002E 12r00r00         [24]  385 	lcall	_lcdDelay
                                    386 ;	a_lcd.c:27: P2_1 = 1;
                                    387 ;	assignBit
      000031 D2 A1            [12]  388 	setb	_P2_1
                                    389 ;	a_lcd.c:28: P0 = numTable[lcdVal[2]];
      000033 E5*0C            [12]  390 	mov	a,(_lcdVal + 0x0002)
      000035 24r00            [12]  391 	add	a,#_numTable
      000037 F9               [12]  392 	mov	r1,a
      000038 87 80            [24]  393 	mov	_P0,@r1
                                    394 ;	a_lcd.c:29: P2_2 = 0;
                                    395 ;	assignBit
      00003A C2 A2            [12]  396 	clr	_P2_2
                                    397 ;	a_lcd.c:30: lcdDelay(5);
      00003C 75 82 05         [24]  398 	mov	dpl,#0x05
      00003F 12r00r00         [24]  399 	lcall	_lcdDelay
                                    400 ;	a_lcd.c:31: P2_2 = 1;
                                    401 ;	assignBit
      000042 D2 A2            [12]  402 	setb	_P2_2
                                    403 ;	a_lcd.c:32: P0 = numTable[lcdVal[3]];
      000044 E5*0D            [12]  404 	mov	a,(_lcdVal + 0x0003)
      000046 24r00            [12]  405 	add	a,#_numTable
      000048 F9               [12]  406 	mov	r1,a
      000049 87 80            [24]  407 	mov	_P0,@r1
                                    408 ;	a_lcd.c:33: P2_3 = 0;
                                    409 ;	assignBit
      00004B C2 A3            [12]  410 	clr	_P2_3
                                    411 ;	a_lcd.c:34: lcdDelay(5);
      00004D 75 82 05         [24]  412 	mov	dpl,#0x05
      000050 12r00r00         [24]  413 	lcall	_lcdDelay
                                    414 ;	a_lcd.c:35: P2_3 = 1;
                                    415 ;	assignBit
      000053 D2 A3            [12]  416 	setb	_P2_3
                                    417 ;	a_lcd.c:36: }
      000055 22               [24]  418 	ret
                                    419 ;------------------------------------------------------------
                                    420 ;Allocation info for local variables in function 'showLcd3'
                                    421 ;------------------------------------------------------------
                                    422 ;pos                       Allocated to registers r7 
                                    423 ;------------------------------------------------------------
                                    424 ;	a_lcd.c:38: void showLcd3(unsigned char pos){
                                    425 ;	-----------------------------------------
                                    426 ;	 function showLcd3
                                    427 ;	-----------------------------------------
      000056                        428 _showLcd3:
                                    429 ;	a_lcd.c:39: P0 = numTable[lcdVal[pos]];
      000056 E5 82            [12]  430 	mov	a,dpl
      000058 FF               [12]  431 	mov	r7,a
      000059 24r0A            [12]  432 	add	a,#_lcdVal
      00005B F9               [12]  433 	mov	r1,a
      00005C E7               [12]  434 	mov	a,@r1
      00005D FE               [12]  435 	mov	r6,a
      00005E 24r00            [12]  436 	add	a,#_numTable
      000060 F9               [12]  437 	mov	r1,a
      000061 87 80            [24]  438 	mov	_P0,@r1
                                    439 ;	a_lcd.c:40: switch (pos){
      000063 EF               [12]  440 	mov	a,r7
      000064 24 FC            [12]  441 	add	a,#0xff - 0x03
      000066 40 39            [24]  442 	jc	00105$
      000068 EF               [12]  443 	mov	a,r7
      000069 2F               [12]  444 	add	a,r7
                                    445 ;	a_lcd.c:41: case 0:
      00006A 90r00r6E         [24]  446 	mov	dptr,#00114$
      00006D 73               [24]  447 	jmp	@a+dptr
      00006E                        448 00114$:
      00006E 80 06            [24]  449 	sjmp	00101$
      000070 80 0F            [24]  450 	sjmp	00102$
      000072 80 18            [24]  451 	sjmp	00103$
      000074 80 21            [24]  452 	sjmp	00104$
      000076                        453 00101$:
                                    454 ;	a_lcd.c:42: P2_0 = 0;
                                    455 ;	assignBit
      000076 C2 A0            [12]  456 	clr	_P2_0
                                    457 ;	a_lcd.c:43: lcdDelay(5);
      000078 75 82 05         [24]  458 	mov	dpl,#0x05
      00007B 12r00r00         [24]  459 	lcall	_lcdDelay
                                    460 ;	a_lcd.c:44: P2_0 = 1;
                                    461 ;	assignBit
      00007E D2 A0            [12]  462 	setb	_P2_0
                                    463 ;	a_lcd.c:45: break;
                                    464 ;	a_lcd.c:46: case 1:
      000080 22               [24]  465 	ret
      000081                        466 00102$:
                                    467 ;	a_lcd.c:47: P2_1 = 0;
                                    468 ;	assignBit
      000081 C2 A1            [12]  469 	clr	_P2_1
                                    470 ;	a_lcd.c:48: lcdDelay(5);
      000083 75 82 05         [24]  471 	mov	dpl,#0x05
      000086 12r00r00         [24]  472 	lcall	_lcdDelay
                                    473 ;	a_lcd.c:49: P2_1 = 1;
                                    474 ;	assignBit
      000089 D2 A1            [12]  475 	setb	_P2_1
                                    476 ;	a_lcd.c:50: break;
                                    477 ;	a_lcd.c:51: case 2:
      00008B 22               [24]  478 	ret
      00008C                        479 00103$:
                                    480 ;	a_lcd.c:52: P2_2 = 0;
                                    481 ;	assignBit
      00008C C2 A2            [12]  482 	clr	_P2_2
                                    483 ;	a_lcd.c:53: lcdDelay(5);
      00008E 75 82 05         [24]  484 	mov	dpl,#0x05
      000091 12r00r00         [24]  485 	lcall	_lcdDelay
                                    486 ;	a_lcd.c:54: P2_2 = 1;
                                    487 ;	assignBit
      000094 D2 A2            [12]  488 	setb	_P2_2
                                    489 ;	a_lcd.c:55: break;
                                    490 ;	a_lcd.c:56: case 3:
      000096 22               [24]  491 	ret
      000097                        492 00104$:
                                    493 ;	a_lcd.c:57: P2_3 = 0;
                                    494 ;	assignBit
      000097 C2 A3            [12]  495 	clr	_P2_3
                                    496 ;	a_lcd.c:58: lcdDelay(5);
      000099 75 82 05         [24]  497 	mov	dpl,#0x05
      00009C 12r00r00         [24]  498 	lcall	_lcdDelay
                                    499 ;	a_lcd.c:59: P2_3 = 1;
                                    500 ;	assignBit
      00009F D2 A3            [12]  501 	setb	_P2_3
                                    502 ;	a_lcd.c:60: break;
                                    503 ;	a_lcd.c:61: default:
                                    504 ;	a_lcd.c:62: return;
                                    505 ;	a_lcd.c:64: }
      0000A1                        506 00105$:
                                    507 ;	a_lcd.c:65: }
      0000A1 22               [24]  508 	ret
                                    509 ;------------------------------------------------------------
                                    510 ;Allocation info for local variables in function 'showLcd'
                                    511 ;------------------------------------------------------------
                                    512 ;val                       Allocated with name '_showLcd_PARM_2'
                                    513 ;pos                       Allocated to registers r7 
                                    514 ;------------------------------------------------------------
                                    515 ;	a_lcd.c:68: void showLcd(unsigned char pos, unsigned char val){
                                    516 ;	-----------------------------------------
                                    517 ;	 function showLcd
                                    518 ;	-----------------------------------------
      0000A2                        519 _showLcd:
      0000A2 AF 82            [24]  520 	mov	r7,dpl
                                    521 ;	a_lcd.c:69: P0 = numTable[val];
      0000A4 E5*0E            [12]  522 	mov	a,_showLcd_PARM_2
      0000A6 24r00            [12]  523 	add	a,#_numTable
      0000A8 F9               [12]  524 	mov	r1,a
      0000A9 87 80            [24]  525 	mov	_P0,@r1
                                    526 ;	a_lcd.c:70: switch (pos){
      0000AB EF               [12]  527 	mov	a,r7
      0000AC 24 FC            [12]  528 	add	a,#0xff - 0x03
      0000AE 40 39            [24]  529 	jc	00105$
      0000B0 EF               [12]  530 	mov	a,r7
      0000B1 2F               [12]  531 	add	a,r7
                                    532 ;	a_lcd.c:71: case 0:
      0000B2 90r00rB6         [24]  533 	mov	dptr,#00114$
      0000B5 73               [24]  534 	jmp	@a+dptr
      0000B6                        535 00114$:
      0000B6 80 06            [24]  536 	sjmp	00101$
      0000B8 80 0F            [24]  537 	sjmp	00102$
      0000BA 80 18            [24]  538 	sjmp	00103$
      0000BC 80 21            [24]  539 	sjmp	00104$
      0000BE                        540 00101$:
                                    541 ;	a_lcd.c:72: P2_0 = 0;
                                    542 ;	assignBit
      0000BE C2 A0            [12]  543 	clr	_P2_0
                                    544 ;	a_lcd.c:73: lcdDelay(5);
      0000C0 75 82 05         [24]  545 	mov	dpl,#0x05
      0000C3 12r00r00         [24]  546 	lcall	_lcdDelay
                                    547 ;	a_lcd.c:74: P2_0 = 1;
                                    548 ;	assignBit
      0000C6 D2 A0            [12]  549 	setb	_P2_0
                                    550 ;	a_lcd.c:75: break;
                                    551 ;	a_lcd.c:76: case 1:
      0000C8 22               [24]  552 	ret
      0000C9                        553 00102$:
                                    554 ;	a_lcd.c:77: P2_1 = 0;
                                    555 ;	assignBit
      0000C9 C2 A1            [12]  556 	clr	_P2_1
                                    557 ;	a_lcd.c:78: lcdDelay(5);
      0000CB 75 82 05         [24]  558 	mov	dpl,#0x05
      0000CE 12r00r00         [24]  559 	lcall	_lcdDelay
                                    560 ;	a_lcd.c:79: P2_1 = 1;
                                    561 ;	assignBit
      0000D1 D2 A1            [12]  562 	setb	_P2_1
                                    563 ;	a_lcd.c:80: break;
                                    564 ;	a_lcd.c:81: case 2:
      0000D3 22               [24]  565 	ret
      0000D4                        566 00103$:
                                    567 ;	a_lcd.c:82: P2_2 = 0;
                                    568 ;	assignBit
      0000D4 C2 A2            [12]  569 	clr	_P2_2
                                    570 ;	a_lcd.c:83: lcdDelay(5);
      0000D6 75 82 05         [24]  571 	mov	dpl,#0x05
      0000D9 12r00r00         [24]  572 	lcall	_lcdDelay
                                    573 ;	a_lcd.c:84: P2_2 = 1;
                                    574 ;	assignBit
      0000DC D2 A2            [12]  575 	setb	_P2_2
                                    576 ;	a_lcd.c:85: break;
                                    577 ;	a_lcd.c:86: case 3:
      0000DE 22               [24]  578 	ret
      0000DF                        579 00104$:
                                    580 ;	a_lcd.c:87: P2_3 = 0;
                                    581 ;	assignBit
      0000DF C2 A3            [12]  582 	clr	_P2_3
                                    583 ;	a_lcd.c:88: lcdDelay(5);
      0000E1 75 82 05         [24]  584 	mov	dpl,#0x05
      0000E4 12r00r00         [24]  585 	lcall	_lcdDelay
                                    586 ;	a_lcd.c:89: P2_3 = 1;
                                    587 ;	assignBit
      0000E7 D2 A3            [12]  588 	setb	_P2_3
                                    589 ;	a_lcd.c:90: break;
                                    590 ;	a_lcd.c:91: default:
                                    591 ;	a_lcd.c:92: return;
                                    592 ;	a_lcd.c:94: }
      0000E9                        593 00105$:
                                    594 ;	a_lcd.c:95: }
      0000E9 22               [24]  595 	ret
                                    596 ;------------------------------------------------------------
                                    597 ;Allocation info for local variables in function 'sumLcdVal'
                                    598 ;------------------------------------------------------------
                                    599 ;answer                    Allocated to registers 
                                    600 ;------------------------------------------------------------
                                    601 ;	a_lcd.c:97: int sumLcdVal(){
                                    602 ;	-----------------------------------------
                                    603 ;	 function sumLcdVal
                                    604 ;	-----------------------------------------
      0000EA                        605 _sumLcdVal:
                                    606 ;	a_lcd.c:99: answer = lcdVal[3] + lcdVal[2]*10 + lcdVal[1]*100 + lcdVal[0]*1000;
      0000EA AE*0D            [24]  607 	mov	r6,(_lcdVal + 0x0003)
      0000EC 7F 00            [12]  608 	mov	r7,#0x00
      0000EE 85*0C*00         [24]  609 	mov	__mulint_PARM_2,(_lcdVal + 0x0002)
                                    610 ;	1-genFromRTrack replaced	mov	(__mulint_PARM_2 + 1),#0x00
      0000F1 8F*01            [24]  611 	mov	(__mulint_PARM_2 + 1),r7
      0000F3 90 00 0A         [24]  612 	mov	dptr,#0x000a
      0000F6 C0 07            [24]  613 	push	ar7
      0000F8 C0 06            [24]  614 	push	ar6
      0000FA 12r00r00         [24]  615 	lcall	__mulint
      0000FD AC 82            [24]  616 	mov	r4,dpl
      0000FF AD 83            [24]  617 	mov	r5,dph
      000101 D0 06            [24]  618 	pop	ar6
      000103 D0 07            [24]  619 	pop	ar7
      000105 EC               [12]  620 	mov	a,r4
      000106 2E               [12]  621 	add	a,r6
      000107 FE               [12]  622 	mov	r6,a
      000108 ED               [12]  623 	mov	a,r5
      000109 3F               [12]  624 	addc	a,r7
      00010A FF               [12]  625 	mov	r7,a
      00010B 85*0B*00         [24]  626 	mov	__mulint_PARM_2,(_lcdVal + 0x0001)
      00010E 75*01 00         [24]  627 	mov	(__mulint_PARM_2 + 1),#0x00
      000111 90 00 64         [24]  628 	mov	dptr,#0x0064
      000114 C0 07            [24]  629 	push	ar7
      000116 C0 06            [24]  630 	push	ar6
      000118 12r00r00         [24]  631 	lcall	__mulint
      00011B AC 82            [24]  632 	mov	r4,dpl
      00011D AD 83            [24]  633 	mov	r5,dph
      00011F D0 06            [24]  634 	pop	ar6
      000121 D0 07            [24]  635 	pop	ar7
      000123 EC               [12]  636 	mov	a,r4
      000124 2E               [12]  637 	add	a,r6
      000125 FE               [12]  638 	mov	r6,a
      000126 ED               [12]  639 	mov	a,r5
      000127 3F               [12]  640 	addc	a,r7
      000128 FF               [12]  641 	mov	r7,a
      000129 85*0A*00         [24]  642 	mov	__mulint_PARM_2,_lcdVal
      00012C 75*01 00         [24]  643 	mov	(__mulint_PARM_2 + 1),#0x00
      00012F 90 03 E8         [24]  644 	mov	dptr,#0x03e8
      000132 C0 07            [24]  645 	push	ar7
      000134 C0 06            [24]  646 	push	ar6
      000136 12r00r00         [24]  647 	lcall	__mulint
      000139 AC 82            [24]  648 	mov	r4,dpl
      00013B AD 83            [24]  649 	mov	r5,dph
      00013D D0 06            [24]  650 	pop	ar6
      00013F D0 07            [24]  651 	pop	ar7
      000141 EC               [12]  652 	mov	a,r4
      000142 2E               [12]  653 	add	a,r6
      000143 F5 82            [12]  654 	mov	dpl,a
      000145 ED               [12]  655 	mov	a,r5
      000146 3F               [12]  656 	addc	a,r7
      000147 F5 83            [12]  657 	mov	dph,a
                                    658 ;	a_lcd.c:100: return answer;
                                    659 ;	a_lcd.c:101: }
      000149 22               [24]  660 	ret
                                    661 ;------------------------------------------------------------
                                    662 ;Allocation info for local variables in function 'addLcd'
                                    663 ;------------------------------------------------------------
                                    664 ;ix                        Allocated to registers r7 
                                    665 ;i                         Allocated to registers r5 r6 
                                    666 ;------------------------------------------------------------
                                    667 ;	a_lcd.c:103: void addLcd(unsigned char ix){
                                    668 ;	-----------------------------------------
                                    669 ;	 function addLcd
                                    670 ;	-----------------------------------------
      00014A                        671 _addLcd:
                                    672 ;	a_lcd.c:104: lcdVal[ix]++;
      00014A E5 82            [12]  673 	mov	a,dpl
      00014C FF               [12]  674 	mov	r7,a
      00014D 24r0A            [12]  675 	add	a,#_lcdVal
      00014F F9               [12]  676 	mov	r1,a
      000150 87 06            [24]  677 	mov	ar6,@r1
      000152 0E               [12]  678 	inc	r6
      000153 A7 06            [24]  679 	mov	@r1,ar6
                                    680 ;	a_lcd.c:105: if (lcdVal[ix]>9){
      000155 EE               [12]  681 	mov	a,r6
      000156 24 F6            [12]  682 	add	a,#0xff - 0x09
      000158 50 27            [24]  683 	jnc	00109$
                                    684 ;	a_lcd.c:106: lcdVal[ix] = 0;
      00015A 77 00            [12]  685 	mov	@r1,#0x00
                                    686 ;	a_lcd.c:107: if (ix == 0){
      00015C EF               [12]  687 	mov	a,r7
                                    688 ;	a_lcd.c:108: for (int i = 0; i < 4; i++){
      00015D 70 1B            [24]  689 	jnz	00103$
      00015F FD               [12]  690 	mov	r5,a
      000160 FE               [12]  691 	mov	r6,a
      000161                        692 00107$:
      000161 C3               [12]  693 	clr	c
      000162 ED               [12]  694 	mov	a,r5
      000163 94 04            [12]  695 	subb	a,#0x04
      000165 EE               [12]  696 	mov	a,r6
      000166 64 80            [12]  697 	xrl	a,#0x80
      000168 94 80            [12]  698 	subb	a,#0x80
      00016A 50 0D            [24]  699 	jnc	00101$
                                    700 ;	a_lcd.c:109: lcdVal[i] = 0;
      00016C ED               [12]  701 	mov	a,r5
      00016D 24r0A            [12]  702 	add	a,#_lcdVal
      00016F F8               [12]  703 	mov	r0,a
      000170 76 00            [12]  704 	mov	@r0,#0x00
                                    705 ;	a_lcd.c:108: for (int i = 0; i < 4; i++){
      000172 0D               [12]  706 	inc	r5
      000173 BD 00 EB         [24]  707 	cjne	r5,#0x00,00107$
      000176 0E               [12]  708 	inc	r6
      000177 80 E8            [24]  709 	sjmp	00107$
      000179                        710 00101$:
                                    711 ;	a_lcd.c:111: return;
      000179 22               [24]  712 	ret
      00017A                        713 00103$:
                                    714 ;	a_lcd.c:113: addLcd(ix-1);
      00017A EF               [12]  715 	mov	a,r7
      00017B 14               [12]  716 	dec	a
      00017C F5 82            [12]  717 	mov	dpl,a
                                    718 ;	a_lcd.c:115: }
      00017E 02r01r4A         [24]  719 	ljmp	_addLcd
      000181                        720 00109$:
      000181 22               [24]  721 	ret
                                    722 ;------------------------------------------------------------
                                    723 ;Allocation info for local variables in function 'minusLcd'
                                    724 ;------------------------------------------------------------
                                    725 ;ix                        Allocated to registers r7 
                                    726 ;i                         Allocated to registers r5 r6 
                                    727 ;------------------------------------------------------------
                                    728 ;	a_lcd.c:117: void minusLcd(unsigned char ix){
                                    729 ;	-----------------------------------------
                                    730 ;	 function minusLcd
                                    731 ;	-----------------------------------------
      000182                        732 _minusLcd:
                                    733 ;	a_lcd.c:118: if (lcdVal[ix]!=0){
      000182 E5 82            [12]  734 	mov	a,dpl
      000184 FF               [12]  735 	mov	r7,a
      000185 24r0A            [12]  736 	add	a,#_lcdVal
      000187 F9               [12]  737 	mov	r1,a
      000188 E7               [12]  738 	mov	a,@r1
      000189 FE               [12]  739 	mov	r6,a
      00018A 60 04            [24]  740 	jz	00105$
                                    741 ;	a_lcd.c:119: lcdVal[ix]--;
      00018C EE               [12]  742 	mov	a,r6
      00018D 14               [12]  743 	dec	a
      00018E F7               [12]  744 	mov	@r1,a
      00018F 22               [24]  745 	ret
      000190                        746 00105$:
                                    747 ;	a_lcd.c:121: lcdVal[ix] = 9;
      000190 77 09            [12]  748 	mov	@r1,#0x09
                                    749 ;	a_lcd.c:122: if (ix == 3){
      000192 BF 03 1D         [24]  750 	cjne	r7,#0x03,00103$
                                    751 ;	a_lcd.c:123: for (int i = 0; i < 4; i++){
      000195 7D 00            [12]  752 	mov	r5,#0x00
      000197 7E 00            [12]  753 	mov	r6,#0x00
      000199                        754 00108$:
      000199 C3               [12]  755 	clr	c
      00019A ED               [12]  756 	mov	a,r5
      00019B 94 04            [12]  757 	subb	a,#0x04
      00019D EE               [12]  758 	mov	a,r6
      00019E 64 80            [12]  759 	xrl	a,#0x80
      0001A0 94 80            [12]  760 	subb	a,#0x80
      0001A2 50 0D            [24]  761 	jnc	00101$
                                    762 ;	a_lcd.c:124: lcdVal[i] = 9;
      0001A4 ED               [12]  763 	mov	a,r5
      0001A5 24r0A            [12]  764 	add	a,#_lcdVal
      0001A7 F8               [12]  765 	mov	r0,a
      0001A8 76 09            [12]  766 	mov	@r0,#0x09
                                    767 ;	a_lcd.c:123: for (int i = 0; i < 4; i++){
      0001AA 0D               [12]  768 	inc	r5
      0001AB BD 00 EB         [24]  769 	cjne	r5,#0x00,00108$
      0001AE 0E               [12]  770 	inc	r6
      0001AF 80 E8            [24]  771 	sjmp	00108$
      0001B1                        772 00101$:
                                    773 ;	a_lcd.c:126: return;
      0001B1 22               [24]  774 	ret
      0001B2                        775 00103$:
                                    776 ;	a_lcd.c:128: minusLcd(ix+1);
      0001B2 EF               [12]  777 	mov	a,r7
      0001B3 04               [12]  778 	inc	a
      0001B4 F5 82            [12]  779 	mov	dpl,a
                                    780 ;	a_lcd.c:130: }
      0001B6 02r01r82         [24]  781 	ljmp	_minusLcd
                                    782 ;------------------------------------------------------------
                                    783 ;Allocation info for local variables in function 'setLcd'
                                    784 ;------------------------------------------------------------
                                    785 ;val                       Allocated with name '_setLcd_PARM_2'
                                    786 ;pos                       Allocated to registers r7 
                                    787 ;------------------------------------------------------------
                                    788 ;	a_lcd.c:132: void setLcd(unsigned char pos, unsigned char val){
                                    789 ;	-----------------------------------------
                                    790 ;	 function setLcd
                                    791 ;	-----------------------------------------
      0001B9                        792 _setLcd:
                                    793 ;	a_lcd.c:133: lcdVal[pos] = val;
      0001B9 E5 82            [12]  794 	mov	a,dpl
      0001BB 24r0A            [12]  795 	add	a,#_lcdVal
      0001BD F8               [12]  796 	mov	r0,a
      0001BE A6*00            [24]  797 	mov	@r0,_setLcd_PARM_2
                                    798 ;	a_lcd.c:134: }
      0001C0 22               [24]  799 	ret
                                    800 	.area CSEG    (CODE)
                                    801 	.area CONST   (CODE)
                                    802 	.area XINIT   (CODE)
                                    803 	.area CABS    (ABS,CODE)
