                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module a_lcd
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setLcd_PARM_2
                                     12 	.globl _setLcd
                                     13 	.globl _addLcd
                                     14 	.globl _showLcd
                                     15 	.globl _showLcd3
                                     16 	.globl _showLcd2
                                     17 	.globl _lcdDelay
                                     18 	.globl _CY
                                     19 	.globl _AC
                                     20 	.globl _F0
                                     21 	.globl _RS1
                                     22 	.globl _RS0
                                     23 	.globl _OV
                                     24 	.globl _F1
                                     25 	.globl _P
                                     26 	.globl _PS
                                     27 	.globl _PT1
                                     28 	.globl _PX1
                                     29 	.globl _PT0
                                     30 	.globl _PX0
                                     31 	.globl _RD
                                     32 	.globl _WR
                                     33 	.globl _T1
                                     34 	.globl _T0
                                     35 	.globl _INT1
                                     36 	.globl _INT0
                                     37 	.globl _TXD
                                     38 	.globl _RXD
                                     39 	.globl _P3_7
                                     40 	.globl _P3_6
                                     41 	.globl _P3_5
                                     42 	.globl _P3_4
                                     43 	.globl _P3_3
                                     44 	.globl _P3_2
                                     45 	.globl _P3_1
                                     46 	.globl _P3_0
                                     47 	.globl _EA
                                     48 	.globl _ES
                                     49 	.globl _ET1
                                     50 	.globl _EX1
                                     51 	.globl _ET0
                                     52 	.globl _EX0
                                     53 	.globl _P2_7
                                     54 	.globl _P2_6
                                     55 	.globl _P2_5
                                     56 	.globl _P2_4
                                     57 	.globl _P2_3
                                     58 	.globl _P2_2
                                     59 	.globl _P2_1
                                     60 	.globl _P2_0
                                     61 	.globl _SM0
                                     62 	.globl _SM1
                                     63 	.globl _SM2
                                     64 	.globl _REN
                                     65 	.globl _TB8
                                     66 	.globl _RB8
                                     67 	.globl _TI
                                     68 	.globl _RI
                                     69 	.globl _P1_7
                                     70 	.globl _P1_6
                                     71 	.globl _P1_5
                                     72 	.globl _P1_4
                                     73 	.globl _P1_3
                                     74 	.globl _P1_2
                                     75 	.globl _P1_1
                                     76 	.globl _P1_0
                                     77 	.globl _TF1
                                     78 	.globl _TR1
                                     79 	.globl _TF0
                                     80 	.globl _TR0
                                     81 	.globl _IE1
                                     82 	.globl _IT1
                                     83 	.globl _IE0
                                     84 	.globl _IT0
                                     85 	.globl _P0_7
                                     86 	.globl _P0_6
                                     87 	.globl _P0_5
                                     88 	.globl _P0_4
                                     89 	.globl _P0_3
                                     90 	.globl _P0_2
                                     91 	.globl _P0_1
                                     92 	.globl _P0_0
                                     93 	.globl _B
                                     94 	.globl _ACC
                                     95 	.globl _PSW
                                     96 	.globl _IP
                                     97 	.globl _P3
                                     98 	.globl _IE
                                     99 	.globl _P2
                                    100 	.globl _SBUF
                                    101 	.globl _SCON
                                    102 	.globl _P1
                                    103 	.globl _TH1
                                    104 	.globl _TH0
                                    105 	.globl _TL1
                                    106 	.globl _TL0
                                    107 	.globl _TMOD
                                    108 	.globl _TCON
                                    109 	.globl _PCON
                                    110 	.globl _DPH
                                    111 	.globl _DPL
                                    112 	.globl _SP
                                    113 	.globl _P0
                                    114 	.globl _showLcd_PARM_2
                                    115 	.globl _lcdVal
                                    116 	.globl _numTable
                                    117 ;--------------------------------------------------------
                                    118 ; special function registers
                                    119 ;--------------------------------------------------------
                                    120 	.area RSEG    (ABS,DATA)
      000000                        121 	.org 0x0000
                           000080   122 _P0	=	0x0080
                           000081   123 _SP	=	0x0081
                           000082   124 _DPL	=	0x0082
                           000083   125 _DPH	=	0x0083
                           000087   126 _PCON	=	0x0087
                           000088   127 _TCON	=	0x0088
                           000089   128 _TMOD	=	0x0089
                           00008A   129 _TL0	=	0x008a
                           00008B   130 _TL1	=	0x008b
                           00008C   131 _TH0	=	0x008c
                           00008D   132 _TH1	=	0x008d
                           000090   133 _P1	=	0x0090
                           000098   134 _SCON	=	0x0098
                           000099   135 _SBUF	=	0x0099
                           0000A0   136 _P2	=	0x00a0
                           0000A8   137 _IE	=	0x00a8
                           0000B0   138 _P3	=	0x00b0
                           0000B8   139 _IP	=	0x00b8
                           0000D0   140 _PSW	=	0x00d0
                           0000E0   141 _ACC	=	0x00e0
                           0000F0   142 _B	=	0x00f0
                                    143 ;--------------------------------------------------------
                                    144 ; special function bits
                                    145 ;--------------------------------------------------------
                                    146 	.area RSEG    (ABS,DATA)
      000000                        147 	.org 0x0000
                           000080   148 _P0_0	=	0x0080
                           000081   149 _P0_1	=	0x0081
                           000082   150 _P0_2	=	0x0082
                           000083   151 _P0_3	=	0x0083
                           000084   152 _P0_4	=	0x0084
                           000085   153 _P0_5	=	0x0085
                           000086   154 _P0_6	=	0x0086
                           000087   155 _P0_7	=	0x0087
                           000088   156 _IT0	=	0x0088
                           000089   157 _IE0	=	0x0089
                           00008A   158 _IT1	=	0x008a
                           00008B   159 _IE1	=	0x008b
                           00008C   160 _TR0	=	0x008c
                           00008D   161 _TF0	=	0x008d
                           00008E   162 _TR1	=	0x008e
                           00008F   163 _TF1	=	0x008f
                           000090   164 _P1_0	=	0x0090
                           000091   165 _P1_1	=	0x0091
                           000092   166 _P1_2	=	0x0092
                           000093   167 _P1_3	=	0x0093
                           000094   168 _P1_4	=	0x0094
                           000095   169 _P1_5	=	0x0095
                           000096   170 _P1_6	=	0x0096
                           000097   171 _P1_7	=	0x0097
                           000098   172 _RI	=	0x0098
                           000099   173 _TI	=	0x0099
                           00009A   174 _RB8	=	0x009a
                           00009B   175 _TB8	=	0x009b
                           00009C   176 _REN	=	0x009c
                           00009D   177 _SM2	=	0x009d
                           00009E   178 _SM1	=	0x009e
                           00009F   179 _SM0	=	0x009f
                           0000A0   180 _P2_0	=	0x00a0
                           0000A1   181 _P2_1	=	0x00a1
                           0000A2   182 _P2_2	=	0x00a2
                           0000A3   183 _P2_3	=	0x00a3
                           0000A4   184 _P2_4	=	0x00a4
                           0000A5   185 _P2_5	=	0x00a5
                           0000A6   186 _P2_6	=	0x00a6
                           0000A7   187 _P2_7	=	0x00a7
                           0000A8   188 _EX0	=	0x00a8
                           0000A9   189 _ET0	=	0x00a9
                           0000AA   190 _EX1	=	0x00aa
                           0000AB   191 _ET1	=	0x00ab
                           0000AC   192 _ES	=	0x00ac
                           0000AF   193 _EA	=	0x00af
                           0000B0   194 _P3_0	=	0x00b0
                           0000B1   195 _P3_1	=	0x00b1
                           0000B2   196 _P3_2	=	0x00b2
                           0000B3   197 _P3_3	=	0x00b3
                           0000B4   198 _P3_4	=	0x00b4
                           0000B5   199 _P3_5	=	0x00b5
                           0000B6   200 _P3_6	=	0x00b6
                           0000B7   201 _P3_7	=	0x00b7
                           0000B0   202 _RXD	=	0x00b0
                           0000B1   203 _TXD	=	0x00b1
                           0000B2   204 _INT0	=	0x00b2
                           0000B3   205 _INT1	=	0x00b3
                           0000B4   206 _T0	=	0x00b4
                           0000B5   207 _T1	=	0x00b5
                           0000B6   208 _WR	=	0x00b6
                           0000B7   209 _RD	=	0x00b7
                           0000B8   210 _PX0	=	0x00b8
                           0000B9   211 _PT0	=	0x00b9
                           0000BA   212 _PX1	=	0x00ba
                           0000BB   213 _PT1	=	0x00bb
                           0000BC   214 _PS	=	0x00bc
                           0000D0   215 _P	=	0x00d0
                           0000D1   216 _F1	=	0x00d1
                           0000D2   217 _OV	=	0x00d2
                           0000D3   218 _RS0	=	0x00d3
                           0000D4   219 _RS1	=	0x00d4
                           0000D5   220 _F0	=	0x00d5
                           0000D6   221 _AC	=	0x00d6
                           0000D7   222 _CY	=	0x00d7
                                    223 ;--------------------------------------------------------
                                    224 ; overlayable register banks
                                    225 ;--------------------------------------------------------
                                    226 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        227 	.ds 8
                                    228 ;--------------------------------------------------------
                                    229 ; internal ram data
                                    230 ;--------------------------------------------------------
                                    231 	.area DSEG    (DATA)
      000000                        232 _numTable::
      000000                        233 	.ds 10
      00000A                        234 _lcdVal::
      00000A                        235 	.ds 4
      00000E                        236 _showLcd_PARM_2:
      00000E                        237 	.ds 1
                                    238 ;--------------------------------------------------------
                                    239 ; overlayable items in internal ram 
                                    240 ;--------------------------------------------------------
                                    241 	.area	OSEG    (OVR,DATA)
                                    242 	.area	OSEG    (OVR,DATA)
      000000                        243 _setLcd_PARM_2:
      000000                        244 	.ds 1
                                    245 ;--------------------------------------------------------
                                    246 ; indirectly addressable internal ram data
                                    247 ;--------------------------------------------------------
                                    248 	.area ISEG    (DATA)
                                    249 ;--------------------------------------------------------
                                    250 ; absolute internal ram data
                                    251 ;--------------------------------------------------------
                                    252 	.area IABS    (ABS,DATA)
                                    253 	.area IABS    (ABS,DATA)
                                    254 ;--------------------------------------------------------
                                    255 ; bit data
                                    256 ;--------------------------------------------------------
                                    257 	.area BSEG    (BIT)
                                    258 ;--------------------------------------------------------
                                    259 ; paged external ram data
                                    260 ;--------------------------------------------------------
                                    261 	.area PSEG    (PAG,XDATA)
                                    262 ;--------------------------------------------------------
                                    263 ; external ram data
                                    264 ;--------------------------------------------------------
                                    265 	.area XSEG    (XDATA)
                                    266 ;--------------------------------------------------------
                                    267 ; absolute external ram data
                                    268 ;--------------------------------------------------------
                                    269 	.area XABS    (ABS,XDATA)
                                    270 ;--------------------------------------------------------
                                    271 ; external initialized ram data
                                    272 ;--------------------------------------------------------
                                    273 	.area XISEG   (XDATA)
                                    274 	.area HOME    (CODE)
                                    275 	.area GSINIT0 (CODE)
                                    276 	.area GSINIT1 (CODE)
                                    277 	.area GSINIT2 (CODE)
                                    278 	.area GSINIT3 (CODE)
                                    279 	.area GSINIT4 (CODE)
                                    280 	.area GSINIT5 (CODE)
                                    281 	.area GSINIT  (CODE)
                                    282 	.area GSFINAL (CODE)
                                    283 	.area CSEG    (CODE)
                                    284 ;--------------------------------------------------------
                                    285 ; global & static initialisations
                                    286 ;--------------------------------------------------------
                                    287 	.area HOME    (CODE)
                                    288 	.area GSINIT  (CODE)
                                    289 	.area GSFINAL (CODE)
                                    290 	.area GSINIT  (CODE)
                                    291 ;	a_lcd.c:3: unsigned char numTable[] = { 0xC0, 0xF9, 0xA4, 0xB0, 0x99,   // 0, 1, 2, 3, 4
      000000 75*00 C0         [24]  292 	mov	_numTable,#0xc0
      000003 75*01 F9         [24]  293 	mov	(_numTable + 0x0001),#0xf9
      000006 75*02 A4         [24]  294 	mov	(_numTable + 0x0002),#0xa4
      000009 75*03 B0         [24]  295 	mov	(_numTable + 0x0003),#0xb0
      00000C 75*04 99         [24]  296 	mov	(_numTable + 0x0004),#0x99
      00000F 75*05 92         [24]  297 	mov	(_numTable + 0x0005),#0x92
      000012 75*06 82         [24]  298 	mov	(_numTable + 0x0006),#0x82
      000015 75*07 F8         [24]  299 	mov	(_numTable + 0x0007),#0xf8
      000018 75*08 80         [24]  300 	mov	(_numTable + 0x0008),#0x80
      00001B 75*09 90         [24]  301 	mov	(_numTable + 0x0009),#0x90
                                    302 ;	a_lcd.c:17: unsigned char lcdVal[4] = {0};
      00001E 75*0A 00         [24]  303 	mov	_lcdVal,#0x00
                                    304 ;--------------------------------------------------------
                                    305 ; Home
                                    306 ;--------------------------------------------------------
                                    307 	.area HOME    (CODE)
                                    308 	.area HOME    (CODE)
                                    309 ;--------------------------------------------------------
                                    310 ; code
                                    311 ;--------------------------------------------------------
                                    312 	.area CSEG    (CODE)
                                    313 ;------------------------------------------------------------
                                    314 ;Allocation info for local variables in function 'lcdDelay'
                                    315 ;------------------------------------------------------------
                                    316 ;i                         Allocated to registers 
                                    317 ;j                         Allocated to registers r6 
                                    318 ;------------------------------------------------------------
                                    319 ;	a_lcd.c:8: void lcdDelay(unsigned char i){
                                    320 ;	-----------------------------------------
                                    321 ;	 function lcdDelay
                                    322 ;	-----------------------------------------
      000000                        323 _lcdDelay:
                           000007   324 	ar7 = 0x07
                           000006   325 	ar6 = 0x06
                           000005   326 	ar5 = 0x05
                           000004   327 	ar4 = 0x04
                           000003   328 	ar3 = 0x03
                           000002   329 	ar2 = 0x02
                           000001   330 	ar1 = 0x01
                           000000   331 	ar0 = 0x00
      000000 AF 82            [24]  332 	mov	r7,dpl
      000002                        333 00106$:
                                    334 ;	a_lcd.c:10: for (; i > 0; i--){
      000002 EF               [12]  335 	mov	a,r7
      000003 60 0B            [24]  336 	jz	00108$
                                    337 ;	a_lcd.c:11: for (j = 125; j > 0; j--){
      000005 7E 7D            [12]  338 	mov	r6,#0x7d
      000007                        339 00104$:
      000007 EE               [12]  340 	mov	a,r6
      000008 14               [12]  341 	dec	a
      000009 FD               [12]  342 	mov	r5,a
      00000A FE               [12]  343 	mov	r6,a
      00000B 70 FA            [24]  344 	jnz	00104$
                                    345 ;	a_lcd.c:10: for (; i > 0; i--){
      00000D 1F               [12]  346 	dec	r7
      00000E 80 F2            [24]  347 	sjmp	00106$
      000010                        348 00108$:
                                    349 ;	a_lcd.c:15: }
      000010 22               [24]  350 	ret
                                    351 ;------------------------------------------------------------
                                    352 ;Allocation info for local variables in function 'showLcd2'
                                    353 ;------------------------------------------------------------
                                    354 ;	a_lcd.c:20: void showLcd2(){
                                    355 ;	-----------------------------------------
                                    356 ;	 function showLcd2
                                    357 ;	-----------------------------------------
      000011                        358 _showLcd2:
                                    359 ;	a_lcd.c:22: P0 = numTable[lcdVal[0]];
      000011 E5*0A            [12]  360 	mov	a,_lcdVal
      000013 24r00            [12]  361 	add	a,#_numTable
      000015 F9               [12]  362 	mov	r1,a
      000016 87 80            [24]  363 	mov	_P0,@r1
                                    364 ;	a_lcd.c:23: P2_0 = 0;
                                    365 ;	assignBit
      000018 C2 A0            [12]  366 	clr	_P2_0
                                    367 ;	a_lcd.c:24: lcdDelay(5);
      00001A 75 82 05         [24]  368 	mov	dpl,#0x05
      00001D 12r00r00         [24]  369 	lcall	_lcdDelay
                                    370 ;	a_lcd.c:25: P2_0 = 1;
                                    371 ;	assignBit
      000020 D2 A0            [12]  372 	setb	_P2_0
                                    373 ;	a_lcd.c:29: P0 = numTable[lcdVal[1]];
      000022 E5*0B            [12]  374 	mov	a,(_lcdVal + 0x0001)
      000024 24r00            [12]  375 	add	a,#_numTable
      000026 F9               [12]  376 	mov	r1,a
      000027 87 80            [24]  377 	mov	_P0,@r1
                                    378 ;	a_lcd.c:30: P2_1 = 0;
                                    379 ;	assignBit
      000029 C2 A1            [12]  380 	clr	_P2_1
                                    381 ;	a_lcd.c:31: lcdDelay(5);
      00002B 75 82 05         [24]  382 	mov	dpl,#0x05
      00002E 12r00r00         [24]  383 	lcall	_lcdDelay
                                    384 ;	a_lcd.c:32: P2_1 = 1;
                                    385 ;	assignBit
      000031 D2 A1            [12]  386 	setb	_P2_1
                                    387 ;	a_lcd.c:36: P0 = numTable[lcdVal[2]];
      000033 E5*0C            [12]  388 	mov	a,(_lcdVal + 0x0002)
      000035 24r00            [12]  389 	add	a,#_numTable
      000037 F9               [12]  390 	mov	r1,a
      000038 87 80            [24]  391 	mov	_P0,@r1
                                    392 ;	a_lcd.c:37: P2_2 = 0;
                                    393 ;	assignBit
      00003A C2 A2            [12]  394 	clr	_P2_2
                                    395 ;	a_lcd.c:38: lcdDelay(5);
      00003C 75 82 05         [24]  396 	mov	dpl,#0x05
      00003F 12r00r00         [24]  397 	lcall	_lcdDelay
                                    398 ;	a_lcd.c:39: P2_2 = 1;
                                    399 ;	assignBit
      000042 D2 A2            [12]  400 	setb	_P2_2
                                    401 ;	a_lcd.c:43: P0 = numTable[lcdVal[3]];
      000044 E5*0D            [12]  402 	mov	a,(_lcdVal + 0x0003)
      000046 24r00            [12]  403 	add	a,#_numTable
      000048 F9               [12]  404 	mov	r1,a
      000049 87 80            [24]  405 	mov	_P0,@r1
                                    406 ;	a_lcd.c:44: P2_3 = 0;
                                    407 ;	assignBit
      00004B C2 A3            [12]  408 	clr	_P2_3
                                    409 ;	a_lcd.c:45: lcdDelay(5);
      00004D 75 82 05         [24]  410 	mov	dpl,#0x05
      000050 12r00r00         [24]  411 	lcall	_lcdDelay
                                    412 ;	a_lcd.c:46: P2_3 = 1;
                                    413 ;	assignBit
      000053 D2 A3            [12]  414 	setb	_P2_3
                                    415 ;	a_lcd.c:49: }
      000055 22               [24]  416 	ret
                                    417 ;------------------------------------------------------------
                                    418 ;Allocation info for local variables in function 'showLcd3'
                                    419 ;------------------------------------------------------------
                                    420 ;pos                       Allocated to registers r7 
                                    421 ;------------------------------------------------------------
                                    422 ;	a_lcd.c:51: void showLcd3(unsigned char pos){
                                    423 ;	-----------------------------------------
                                    424 ;	 function showLcd3
                                    425 ;	-----------------------------------------
      000056                        426 _showLcd3:
                                    427 ;	a_lcd.c:52: P0 = numTable[lcdVal[pos]];
      000056 E5 82            [12]  428 	mov	a,dpl
      000058 FF               [12]  429 	mov	r7,a
      000059 24r0A            [12]  430 	add	a,#_lcdVal
      00005B F9               [12]  431 	mov	r1,a
      00005C E7               [12]  432 	mov	a,@r1
      00005D FE               [12]  433 	mov	r6,a
      00005E 24r00            [12]  434 	add	a,#_numTable
      000060 F9               [12]  435 	mov	r1,a
      000061 87 80            [24]  436 	mov	_P0,@r1
                                    437 ;	a_lcd.c:53: switch (pos){
      000063 EF               [12]  438 	mov	a,r7
      000064 24 FC            [12]  439 	add	a,#0xff - 0x03
      000066 40 39            [24]  440 	jc	00105$
      000068 EF               [12]  441 	mov	a,r7
      000069 2F               [12]  442 	add	a,r7
                                    443 ;	a_lcd.c:54: case 0:
      00006A 90r00r6E         [24]  444 	mov	dptr,#00114$
      00006D 73               [24]  445 	jmp	@a+dptr
      00006E                        446 00114$:
      00006E 80 06            [24]  447 	sjmp	00101$
      000070 80 0F            [24]  448 	sjmp	00102$
      000072 80 18            [24]  449 	sjmp	00103$
      000074 80 21            [24]  450 	sjmp	00104$
      000076                        451 00101$:
                                    452 ;	a_lcd.c:55: P2_0 = 0;
                                    453 ;	assignBit
      000076 C2 A0            [12]  454 	clr	_P2_0
                                    455 ;	a_lcd.c:56: lcdDelay(5);
      000078 75 82 05         [24]  456 	mov	dpl,#0x05
      00007B 12r00r00         [24]  457 	lcall	_lcdDelay
                                    458 ;	a_lcd.c:57: P2_0 = 1;
                                    459 ;	assignBit
      00007E D2 A0            [12]  460 	setb	_P2_0
                                    461 ;	a_lcd.c:58: break;
                                    462 ;	a_lcd.c:59: case 1:
      000080 22               [24]  463 	ret
      000081                        464 00102$:
                                    465 ;	a_lcd.c:60: P2_1 = 0;
                                    466 ;	assignBit
      000081 C2 A1            [12]  467 	clr	_P2_1
                                    468 ;	a_lcd.c:61: lcdDelay(5);
      000083 75 82 05         [24]  469 	mov	dpl,#0x05
      000086 12r00r00         [24]  470 	lcall	_lcdDelay
                                    471 ;	a_lcd.c:62: P2_1 = 1;
                                    472 ;	assignBit
      000089 D2 A1            [12]  473 	setb	_P2_1
                                    474 ;	a_lcd.c:63: break;
                                    475 ;	a_lcd.c:64: case 2:
      00008B 22               [24]  476 	ret
      00008C                        477 00103$:
                                    478 ;	a_lcd.c:65: P2_2 = 0;
                                    479 ;	assignBit
      00008C C2 A2            [12]  480 	clr	_P2_2
                                    481 ;	a_lcd.c:66: lcdDelay(5);
      00008E 75 82 05         [24]  482 	mov	dpl,#0x05
      000091 12r00r00         [24]  483 	lcall	_lcdDelay
                                    484 ;	a_lcd.c:67: P2_2 = 1;
                                    485 ;	assignBit
      000094 D2 A2            [12]  486 	setb	_P2_2
                                    487 ;	a_lcd.c:68: break;
                                    488 ;	a_lcd.c:69: case 3:
      000096 22               [24]  489 	ret
      000097                        490 00104$:
                                    491 ;	a_lcd.c:70: P2_3 = 0;
                                    492 ;	assignBit
      000097 C2 A3            [12]  493 	clr	_P2_3
                                    494 ;	a_lcd.c:71: lcdDelay(5);
      000099 75 82 05         [24]  495 	mov	dpl,#0x05
      00009C 12r00r00         [24]  496 	lcall	_lcdDelay
                                    497 ;	a_lcd.c:72: P2_3 = 1;
                                    498 ;	assignBit
      00009F D2 A3            [12]  499 	setb	_P2_3
                                    500 ;	a_lcd.c:73: break;
                                    501 ;	a_lcd.c:74: default:
                                    502 ;	a_lcd.c:75: return;
                                    503 ;	a_lcd.c:77: }
      0000A1                        504 00105$:
                                    505 ;	a_lcd.c:78: }
      0000A1 22               [24]  506 	ret
                                    507 ;------------------------------------------------------------
                                    508 ;Allocation info for local variables in function 'showLcd'
                                    509 ;------------------------------------------------------------
                                    510 ;val                       Allocated with name '_showLcd_PARM_2'
                                    511 ;pos                       Allocated to registers r7 
                                    512 ;------------------------------------------------------------
                                    513 ;	a_lcd.c:81: void showLcd(unsigned char pos, unsigned char val){
                                    514 ;	-----------------------------------------
                                    515 ;	 function showLcd
                                    516 ;	-----------------------------------------
      0000A2                        517 _showLcd:
      0000A2 AF 82            [24]  518 	mov	r7,dpl
                                    519 ;	a_lcd.c:82: P0 = numTable[val];
      0000A4 E5*0E            [12]  520 	mov	a,_showLcd_PARM_2
      0000A6 24r00            [12]  521 	add	a,#_numTable
      0000A8 F9               [12]  522 	mov	r1,a
      0000A9 87 80            [24]  523 	mov	_P0,@r1
                                    524 ;	a_lcd.c:83: switch (pos){
      0000AB EF               [12]  525 	mov	a,r7
      0000AC 24 FC            [12]  526 	add	a,#0xff - 0x03
      0000AE 40 39            [24]  527 	jc	00105$
      0000B0 EF               [12]  528 	mov	a,r7
      0000B1 2F               [12]  529 	add	a,r7
                                    530 ;	a_lcd.c:84: case 0:
      0000B2 90r00rB6         [24]  531 	mov	dptr,#00114$
      0000B5 73               [24]  532 	jmp	@a+dptr
      0000B6                        533 00114$:
      0000B6 80 06            [24]  534 	sjmp	00101$
      0000B8 80 0F            [24]  535 	sjmp	00102$
      0000BA 80 18            [24]  536 	sjmp	00103$
      0000BC 80 21            [24]  537 	sjmp	00104$
      0000BE                        538 00101$:
                                    539 ;	a_lcd.c:85: P2_0 = 0;
                                    540 ;	assignBit
      0000BE C2 A0            [12]  541 	clr	_P2_0
                                    542 ;	a_lcd.c:86: lcdDelay(5);
      0000C0 75 82 05         [24]  543 	mov	dpl,#0x05
      0000C3 12r00r00         [24]  544 	lcall	_lcdDelay
                                    545 ;	a_lcd.c:87: P2_0 = 1;
                                    546 ;	assignBit
      0000C6 D2 A0            [12]  547 	setb	_P2_0
                                    548 ;	a_lcd.c:88: break;
                                    549 ;	a_lcd.c:89: case 1:
      0000C8 22               [24]  550 	ret
      0000C9                        551 00102$:
                                    552 ;	a_lcd.c:90: P2_1 = 0;
                                    553 ;	assignBit
      0000C9 C2 A1            [12]  554 	clr	_P2_1
                                    555 ;	a_lcd.c:91: lcdDelay(5);
      0000CB 75 82 05         [24]  556 	mov	dpl,#0x05
      0000CE 12r00r00         [24]  557 	lcall	_lcdDelay
                                    558 ;	a_lcd.c:92: P2_1 = 1;
                                    559 ;	assignBit
      0000D1 D2 A1            [12]  560 	setb	_P2_1
                                    561 ;	a_lcd.c:93: break;
                                    562 ;	a_lcd.c:94: case 2:
      0000D3 22               [24]  563 	ret
      0000D4                        564 00103$:
                                    565 ;	a_lcd.c:95: P2_2 = 0;
                                    566 ;	assignBit
      0000D4 C2 A2            [12]  567 	clr	_P2_2
                                    568 ;	a_lcd.c:96: lcdDelay(5);
      0000D6 75 82 05         [24]  569 	mov	dpl,#0x05
      0000D9 12r00r00         [24]  570 	lcall	_lcdDelay
                                    571 ;	a_lcd.c:97: P2_2 = 1;
                                    572 ;	assignBit
      0000DC D2 A2            [12]  573 	setb	_P2_2
                                    574 ;	a_lcd.c:98: break;
                                    575 ;	a_lcd.c:99: case 3:
      0000DE 22               [24]  576 	ret
      0000DF                        577 00104$:
                                    578 ;	a_lcd.c:100: P2_3 = 0;
                                    579 ;	assignBit
      0000DF C2 A3            [12]  580 	clr	_P2_3
                                    581 ;	a_lcd.c:101: lcdDelay(5);
      0000E1 75 82 05         [24]  582 	mov	dpl,#0x05
      0000E4 12r00r00         [24]  583 	lcall	_lcdDelay
                                    584 ;	a_lcd.c:102: P2_3 = 1;
                                    585 ;	assignBit
      0000E7 D2 A3            [12]  586 	setb	_P2_3
                                    587 ;	a_lcd.c:103: break;
                                    588 ;	a_lcd.c:104: default:
                                    589 ;	a_lcd.c:105: return;
                                    590 ;	a_lcd.c:107: }
      0000E9                        591 00105$:
                                    592 ;	a_lcd.c:108: }
      0000E9 22               [24]  593 	ret
                                    594 ;------------------------------------------------------------
                                    595 ;Allocation info for local variables in function 'addLcd'
                                    596 ;------------------------------------------------------------
                                    597 ;ix                        Allocated to registers r7 
                                    598 ;i                         Allocated to registers r5 r6 
                                    599 ;------------------------------------------------------------
                                    600 ;	a_lcd.c:110: void addLcd(unsigned char ix){
                                    601 ;	-----------------------------------------
                                    602 ;	 function addLcd
                                    603 ;	-----------------------------------------
      0000EA                        604 _addLcd:
                                    605 ;	a_lcd.c:111: lcdVal[ix]++;
      0000EA E5 82            [12]  606 	mov	a,dpl
      0000EC FF               [12]  607 	mov	r7,a
      0000ED 24r0A            [12]  608 	add	a,#_lcdVal
      0000EF F9               [12]  609 	mov	r1,a
      0000F0 87 06            [24]  610 	mov	ar6,@r1
      0000F2 0E               [12]  611 	inc	r6
      0000F3 A7 06            [24]  612 	mov	@r1,ar6
                                    613 ;	a_lcd.c:112: if (lcdVal[ix]>9){
      0000F5 EE               [12]  614 	mov	a,r6
      0000F6 24 F6            [12]  615 	add	a,#0xff - 0x09
      0000F8 50 27            [24]  616 	jnc	00109$
                                    617 ;	a_lcd.c:113: lcdVal[ix] = 0;
      0000FA 77 00            [12]  618 	mov	@r1,#0x00
                                    619 ;	a_lcd.c:114: if (ix == 0){
      0000FC EF               [12]  620 	mov	a,r7
                                    621 ;	a_lcd.c:115: for (int i = 0; i < 4; i++){
      0000FD 70 1B            [24]  622 	jnz	00103$
      0000FF FD               [12]  623 	mov	r5,a
      000100 FE               [12]  624 	mov	r6,a
      000101                        625 00107$:
      000101 C3               [12]  626 	clr	c
      000102 ED               [12]  627 	mov	a,r5
      000103 94 04            [12]  628 	subb	a,#0x04
      000105 EE               [12]  629 	mov	a,r6
      000106 64 80            [12]  630 	xrl	a,#0x80
      000108 94 80            [12]  631 	subb	a,#0x80
      00010A 50 0D            [24]  632 	jnc	00101$
                                    633 ;	a_lcd.c:116: lcdVal[i] = 0;
      00010C ED               [12]  634 	mov	a,r5
      00010D 24r0A            [12]  635 	add	a,#_lcdVal
      00010F F8               [12]  636 	mov	r0,a
      000110 76 00            [12]  637 	mov	@r0,#0x00
                                    638 ;	a_lcd.c:115: for (int i = 0; i < 4; i++){
      000112 0D               [12]  639 	inc	r5
      000113 BD 00 EB         [24]  640 	cjne	r5,#0x00,00107$
      000116 0E               [12]  641 	inc	r6
      000117 80 E8            [24]  642 	sjmp	00107$
      000119                        643 00101$:
                                    644 ;	a_lcd.c:119: return;
      000119 22               [24]  645 	ret
      00011A                        646 00103$:
                                    647 ;	a_lcd.c:121: addLcd(ix-1);
      00011A EF               [12]  648 	mov	a,r7
      00011B 14               [12]  649 	dec	a
      00011C F5 82            [12]  650 	mov	dpl,a
                                    651 ;	a_lcd.c:124: }
      00011E 02r00rEA         [24]  652 	ljmp	_addLcd
      000121                        653 00109$:
      000121 22               [24]  654 	ret
                                    655 ;------------------------------------------------------------
                                    656 ;Allocation info for local variables in function 'setLcd'
                                    657 ;------------------------------------------------------------
                                    658 ;val                       Allocated with name '_setLcd_PARM_2'
                                    659 ;pos                       Allocated to registers r7 
                                    660 ;------------------------------------------------------------
                                    661 ;	a_lcd.c:126: void setLcd(unsigned char pos, unsigned char val){
                                    662 ;	-----------------------------------------
                                    663 ;	 function setLcd
                                    664 ;	-----------------------------------------
      000122                        665 _setLcd:
                                    666 ;	a_lcd.c:127: lcdVal[pos] = val;
      000122 E5 82            [12]  667 	mov	a,dpl
      000124 24r0A            [12]  668 	add	a,#_lcdVal
      000126 F8               [12]  669 	mov	r0,a
      000127 A6*00            [24]  670 	mov	@r0,_setLcd_PARM_2
                                    671 ;	a_lcd.c:129: }
      000129 22               [24]  672 	ret
                                    673 	.area CSEG    (CODE)
                                    674 	.area CONST   (CODE)
                                    675 	.area XINIT   (CODE)
                                    676 	.area CABS    (ABS,CODE)
